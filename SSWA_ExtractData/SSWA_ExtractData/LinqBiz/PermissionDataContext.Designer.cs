//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 3/3/2016 10:40:20 AM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace PermissionContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class PermissionDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(PermissionDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertAccount(Account instance);
        partial void UpdateAccount(Account instance);
        partial void DeleteAccount(Account instance);
        partial void InsertLog(Log instance);
        partial void UpdateLog(Log instance);
        partial void DeleteLog(Log instance);
        partial void InsertRssMenuPage(RssMenuPage instance);
        partial void UpdateRssMenuPage(RssMenuPage instance);
        partial void DeleteRssMenuPage(RssMenuPage instance);
        partial void InsertRssPage(RssPage instance);
        partial void UpdateRssPage(RssPage instance);
        partial void DeleteRssPage(RssPage instance);

        #endregion

        public PermissionDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public PermissionDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public PermissionDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PermissionDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PermissionDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public PermissionDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Account> Accounts
        {
            get
            {
                return this.GetTable<Account>();
            }
        }

        public Devart.Data.Linq.Table<Log> Logs
        {
            get
            {
                return this.GetTable<Log>();
            }
        }

        public Devart.Data.Linq.Table<RssMenuPage> RssMenuPages
        {
            get
            {
                return this.GetTable<RssMenuPage>();
            }
        }

        public Devart.Data.Linq.Table<RssPage> RssPages
        {
            get
            {
                return this.GetTable<RssPage>();
            }
        }
    }
}

namespace PermissionContext
{

    /// <summary>
    /// There are no comments for PermissionContext.Account in the schema.
    /// </summary>
    [Table(Name = @"""main"".Account")]
    public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _FullName;

        private string _Address;

        private string _Phone;

        private string _UserName;

        private string _Password;

        private string _Email;

        private long _Permission;

        private System.Nullable<long> _Status;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnFullNameChanging(string value);
        partial void OnFullNameChanged();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnPhoneChanging(string value);
        partial void OnPhoneChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnPermissionChanging(long value);
        partial void OnPermissionChanged();
        partial void OnStatusChanging(System.Nullable<long> value);
        partial void OnStatusChanged();
        #endregion

        public Account()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for FullName in the schema.
        /// </summary>
        [Column(Storage = "_FullName", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if (this._FullName != value)
                {
                    this.OnFullNameChanging(value);
                    this.SendPropertyChanging();
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Address in the schema.
        /// </summary>
        [Column(Storage = "_Address", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this.SendPropertyChanging();
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Phone in the schema.
        /// </summary>
        [Column(Storage = "_Phone", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string Phone
        {
            get
            {
                return this._Phone;
            }
            set
            {
                if (this._Phone != value)
                {
                    this.OnPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._Phone = value;
                    this.SendPropertyChanged("Phone");
                    this.OnPhoneChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Storage = "_UserName", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Storage = "_Password", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging();
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Email in the schema.
        /// </summary>
        [Column(Storage = "_Email", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Permission in the schema.
        /// </summary>
        [Column(Storage = "_Permission", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long Permission
        {
            get
            {
                return this._Permission;
            }
            set
            {
                if (this._Permission != value)
                {
                    this.OnPermissionChanging(value);
                    this.SendPropertyChanging();
                    this._Permission = value;
                    this.SendPropertyChanged("Permission");
                    this.OnPermissionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Storage = "_Status", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging();
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PermissionContext.Log in the schema.
    /// </summary>
    [Table(Name = @"""main"".Log")]
    public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private long _UserId;

        private string _Action;

        private string _Time;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnUserIdChanging(long value);
        partial void OnUserIdChanged();
        partial void OnActionChanging(string value);
        partial void OnActionChanged();
        partial void OnTimeChanging(string value);
        partial void OnTimeChanged();
        #endregion

        public Log()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for UserId in the schema.
        /// </summary>
        [Column(Storage = "_UserId", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long UserId
        {
            get
            {
                return this._UserId;
            }
            set
            {
                if (this._UserId != value)
                {
                    this.OnUserIdChanging(value);
                    this.SendPropertyChanging();
                    this._UserId = value;
                    this.SendPropertyChanged("UserId");
                    this.OnUserIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Action in the schema.
        /// </summary>
        [Column(Storage = "_Action", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this.SendPropertyChanging();
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Time in the schema.
        /// </summary>
        [Column(Storage = "_Time", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Time
        {
            get
            {
                return this._Time;
            }
            set
            {
                if (this._Time != value)
                {
                    this.OnTimeChanging(value);
                    this.SendPropertyChanging();
                    this._Time = value;
                    this.SendPropertyChanged("Time");
                    this.OnTimeChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PermissionContext.RssMenuPage in the schema.
    /// </summary>
    [Table(Name = @"""main"".RssMenuPage")]
    public partial class RssMenuPage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _IdPage;

        private long _IdRssPage;

        private string _Name;

        private string _Link;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdPageChanging(long value);
        partial void OnIdPageChanged();
        partial void OnIdRssPageChanging(long value);
        partial void OnIdRssPageChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnLinkChanging(string value);
        partial void OnLinkChanged();
        #endregion

        public RssMenuPage()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for IdPage in the schema.
        /// </summary>
        [Column(Storage = "_IdPage", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long IdPage
        {
            get
            {
                return this._IdPage;
            }
        }

    
        /// <summary>
        /// There are no comments for IdRssPage in the schema.
        /// </summary>
        [Column(Storage = "_IdRssPage", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IdRssPage
        {
            get
            {
                return this._IdRssPage;
            }
            set
            {
                if (this._IdRssPage != value)
                {
                    this.OnIdRssPageChanging(value);
                    this.SendPropertyChanging();
                    this._IdRssPage = value;
                    this.SendPropertyChanged("IdRssPage");
                    this.OnIdRssPageChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Link in the schema.
        /// </summary>
        [Column(Storage = "_Link", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Link
        {
            get
            {
                return this._Link;
            }
            set
            {
                if (this._Link != value)
                {
                    this.OnLinkChanging(value);
                    this.SendPropertyChanging();
                    this._Link = value;
                    this.SendPropertyChanged("Link");
                    this.OnLinkChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for PermissionContext.RssPage in the schema.
    /// </summary>
    [Table(Name = @"""main"".RssPage")]
    public partial class RssPage : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _Id;

        private string _Name;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(long value);
        partial void OnIdChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        #endregion

        public RssPage()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long Id
        {
            get
            {
                return this._Id;
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Storage = "_Name", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
